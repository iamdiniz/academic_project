ARQUITETURA MODULAR E BOAS PRÁTICAS

Objetivo
- Organizar o projeto para ficar modular, escalável e de fácil manutenção.
- Cada parte da aplicação fica separada por responsabilidade clara, mantendo o mesmo padrão de código que você já vinha usando.

ESTRUTURA COMPLETA DO PROJETO

academic_project/
├── __pycache__/                    # Cache Python (gerado automaticamente)
├── config/                         # Configurações da aplicação
│   ├── __init__.py                 # Inicialização do módulo config
│   └── settings.py                 # Carregamento de variáveis de ambiente
│
├── env/                           # Ambiente virtual Python
│   ├── pyvenv.cfg                  # Configuração do ambiente virtual
│   ├── Scripts/                    # Scripts do ambiente (Windows)
│   │   ├── activate
│   │   ├── activate.bat
│   │   ├── Activate.ps1
│   │   ├── deactivate.bat
│   │   ├── flask.exe
│   │   ├── pip.exe
│   │   ├── pip3.12.exe
│   │   ├── pip3.exe
│   │   ├── python.exe
│   │   └── pythonw.exe
│   └── Lib/                        # Bibliotecas instaladas
│       └── site-packages/          # Pacotes Python instalados
│
├── extensions/                     # Extensões Flask
│   ├── __init__.py                 # Inicialização do módulo extensions
│   ├── database.py                 # Configuração do SQLAlchemy
│   ├── login.py                    # Configuração do Flask-Login
│   └── user_loader.py              # Carregador de usuários para login
│
├── instance/                       # Dados específicos do ambiente
│   └── test.db                     # Banco SQLite de desenvolvimento
│
├── models/                         # Modelos de dados (SQLAlchemy)
│   ├── __init__.py                 # Inicialização do módulo models
│   ├── acompanhamento.py           # Modelo de acompanhamento de alunos
│   ├── aluno.py                    # Modelo de aluno
│   ├── chefe.py                    # Modelo de chefe/gestor
│   ├── curso.py                    # Modelo de curso
│   ├── historico.py                # Modelo de histórico
│   ├── indicacao.py                # Modelo de indicação
│   ├── instituicao.py              # Modelo de instituição de ensino
│   └── skills.py                   # Modelo de habilidades/skills
│
├── routes/                         # Rotas da aplicação (Blueprints)
│   ├── __init__.py                 # Inicialização do módulo routes
│   ├── auth.py                     # Rotas de autenticação (login, cadastro, logout)
│   ├── main.py                     # Rotas principais (/, /carousel, /home)
│   └── remaining_routes.py         # Rotas migradas do legado (instituições, alunos, etc.)
│
├── services/                       # Lógica de negócio
│   ├── __init__.py                 # Inicialização do módulo services
│   └── auth_service.py             # Serviço de autenticação
│
├── static/                         # Arquivos estáticos
│   ├── css/                        # Folhas de estilo
│   │   ├── acompanhar.css
│   │   ├── alunos_indicados.css
│   │   ├── alunos_instituicao.css
│   │   ├── cadastro.css
│   │   ├── cardAlunos.css
│   │   ├── carousel.css
│   │   ├── configuracoes.css
│   │   ├── cursos.css
│   │   ├── detalhes_aluno_instituicao.css
│   │   ├── detalhes_aluno.css
│   │   ├── detalhes_instituicao.css
│   │   ├── home.css
│   │   ├── instituicaoEnsino.css
│   │   ├── login.css
│   │   ├── main.css
│   │   ├── minhas_selecoes.css
│   │   └── perfil.css
│   └── img/                        # Imagens
│       ├── acompanhamento.avif
│       ├── educ.png
│       ├── grafico_aluno_1.png
│       ├── inve.png
│       ├── jovens_work.png
│       ├── logo.png
│       ├── mnna.avif
│       ├── oisa.png
│       ├── onu.png
│       ├── procura.png
│       ├── selecao.png
│       └── win.png
│
├── templates/                      # Templates HTML (Jinja2)
│   ├── acompanhar.html             # Página de acompanhamento
│   ├── alunos_indicados.html       # Lista de alunos indicados
│   ├── alunos_instituicao.html     # Alunos por instituição
│   ├── base.html                   # Template base
│   ├── cadastro.html               # Página de cadastro
│   ├── cardAlunos.html             # Cards de alunos com paginação
│   ├── carousel.html               # Página de carrossel
│   ├── configuracoes.html          # Página de configurações
│   ├── cursos.html                 # Página de cursos
│   ├── detalhes_aluno.html         # Detalhes do aluno
│   ├── detalhes_aluno_instituicao.html # Detalhes aluno para instituição
│   ├── detalhes_instituicao.html   # Detalhes da instituição
│   ├── grafico.html                # Página de gráficos
│   ├── home_chefe.html             # Home do chefe
│   ├── home_instituicao.html       # Home da instituição
│   ├── instituicaoEnsino.html      # Página de instituições
│   ├── login.html                  # Página de login
│   ├── minhas_selecoes.html        # Minhas seleções
│   ├── perfil.html                 # Página de perfil
│   └── status_aluno.html           # Status do aluno
│
├── utils/                          # Utilitários e constantes
│   ├── __init__.py                 # Inicialização do módulo utils
│   └── constants.py                # Constantes do sistema (cursos, skills, etc.)
│
├── validators/                     # Validações e decorators
│   ├── __init__.py                 # Inicialização do módulo validators
│   ├── decorators.py               # Decorators de controle de acesso
│   ├── form_validators.py          # Validações de formulários
│   └── skills_validator.py         # Validações específicas de skills
│
├── .env                            # Variáveis de ambiente (ignorado pelo git)
├── .gitignore                      # Arquivo de exclusão do Git
├── app.py                          # Ponto de entrada principal (Application Factory)
├── ARQUITETURA_MODULAR.txt         # Este documento de arquitetura
├── create_tables.py                # Script para criação de tabelas
├── docker-compose.yaml             # Orquestração de containers
├── Dockerfile                      # Imagem Docker da aplicação
├── env_example.txt                 # Exemplo de variáveis de ambiente
├── init_database.py                # Inicialização do banco de dados
├── MUDANCAS_SEGURANÇA.txt          # Documentação de mudanças de segurança
├── package-lock.json               # Lock file do npm
├── package.json                    # Dependências Node.js (se necessário)
├── README.md                       # Documentação principal do projeto
├── requirements.txt                # Dependências Python
├── SETUP_SECURITY.md               # Guia de configuração de segurança
└── wait-for-db.sh                  # Script para aguardar banco estar pronto

COMO FUNCIONA

Fluxo de Inicialização:
1. app.py → create_app() → carrega configurações
2. Inicializa extensões (banco, login)
3. Registra blueprints (auth, main, remaining)
4. Aplicação pronta para uso

Padrões Mantidos:
- Mesma convenção de nomes em português
- Mesmas validações e fluxos de login/cadastro
- Templates com ajustes de paginação e links

BOAS PRÁTICAS IMPLEMENTADAS

✅ Separação de Responsabilidades
- config/: configurações
- models/: dados do banco
- routes/: rotas organizadas em blueprints
- services/: lógica de negócio
- validators/: validações e controle de acesso
- utils/: constantes centralizadas

✅ Arquitetura Modular
- Application Factory para flexibilidade
- Blueprints para organizar rotas
- Endpoints com aliases para compatibilidade
- Docker configurado e pronto

PRÓXIMOS PASSOS

🔧 Melhorias Futuras:
- Dividir remaining_routes em blueprints menores
- Adicionar testes automatizados (pytest)
- Implementar CSRF e migrações de banco

RESULTADO FINAL

✅ Projeto organizado, modular e escalável
✅ Fácil manutenção e evolução
✅ Código limpo seguindo boas práticas
✅ Estrutura profissional e bem documentada

