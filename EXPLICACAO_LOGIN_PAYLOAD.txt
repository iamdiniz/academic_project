Redirecionamento pÃ³s-login (303 PRG)
â†’ Depois do login, o navegador Ã© redirecionado para /home.
ğŸ‘‰ Assim, o POST com email/senha nÃ£o fica reaparecendo se o usuÃ¡rio der refresh.

Cookies e cabeÃ§alhos de seguranÃ§a
â†’ Cookies sÃ³ acessÃ­veis pelo servidor (HttpOnly) e, quando em HTTPS, com Secure e HSTS.
ğŸ‘‰ Evita que scripts roubem cookies e adiciona proteÃ§Ã£o contra ataques comuns.

Nomes neutros nos campos
â†’ Em vez de nomes iguais Ã s colunas (ex.: email/senha), usamos session_key e encrypted_session_key (e chaves neutras nos outros formulÃ¡rios: a_*, h_*, s_*).
ğŸ‘‰ Quem abrir o DevTools nÃ£o verÃ¡ nomes de colunas ou tabelas do banco nem "email"/"senha" no Payload.

Senha ofuscada no cliente (Base64)
â†’ A senha Ã© convertida para Base64 antes de ser enviada.
ğŸ‘‰ No DevTools nÃ£o aparece em texto puro (a seguranÃ§a real vem do HTTPS).

Backend compatÃ­vel
â†’ O servidor entende tanto o formato antigo quanto o novo e decodifica a senha se vier em Base64.
ğŸ‘‰ Nada quebra para quem ainda usa o fluxo antigo.

PolÃ­tica de seguranÃ§a de conteÃºdo (CSP)
â†’ Ajustada para permitir estilos/scripts do CDN sem quebrar o layout.
ğŸ‘‰ Ajuda a evitar injeÃ§Ã£o de scripts maliciosos.

âœ… Resumo bem simples:
- PÃ³s-login redireciona e nÃ£o reaparece no refresh.
- Cookies mais protegidos (HttpOnly, e Secure/HSTS em HTTPS).
- Campos sensÃ­veis com nomes neutros; nada de nomes de colunas no Payload.
- Senha ofuscada em Base64 no envio.
- Backend aceita formato antigo e novo.
- CSP e cabeÃ§alhos extras deixam a aplicaÃ§Ã£o mais segura.
